2025-02-23 15:12:55,483:[P:3086]:Rank[0/1] => collecting env info (might take some time)
2025-02-23 15:13:12,417:[P:3086]:Rank[0/1] 
PyTorch version: 1.7.1+cu110
Is debug build: False
CUDA used to build PyTorch: 11.0
ROCM used to build PyTorch: N/A

OS: Ubuntu 20.04.6 LTS (x86_64)
GCC version: (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
Clang version: Could not collect
CMake version: Could not collect

Python version: 3.9 (64-bit runtime)
Is CUDA available: True
CUDA runtime version: Could not collect
GPU models and configuration: GPU 0: NVIDIA GeForce RTX 2070
Nvidia driver version: 560.94
cuDNN version: Could not collect
HIP runtime version: N/A
MIOpen runtime version: N/A

Versions of relevant libraries:
[pip3] numpy==1.25.2
[pip3] torch==1.7.1+cu110
[pip3] torchinfo==1.8.0
[pip3] torchsummary==1.5.1
[pip3] torchvision==0.8.2+cu110
[conda] blas                      1.0                         mkl  
[conda] cpuonly                   2.0                           0    pytorch
[conda] mkl                       2020.2                      256  
[conda] mkl-service               2.3.0            py39he8ac12f_0  
[conda] mkl_fft                   1.3.0            py39h54f3939_0  
[conda] mkl_random                1.0.2            py39h63df603_0  
[conda] numpy                     1.25.2                   pypi_0    pypi
[conda] pytorch-mutex             1.0                         cpu    pytorch
[conda] torch                     1.7.1+cu110              pypi_0    pypi
[conda] torchinfo                 1.8.0                    pypi_0    pypi
[conda] torchsummary              1.5.1                    pypi_0    pypi
[conda] torchvision               0.8.2+cu110              pypi_0    pypi
2025-02-23 15:13:12,418:[P:3086]:Rank[0/1] Namespace(cfg='experiments/imagenet/cvt/cvt-dim6-310x321.yaml', local_rank=0, port=9000, opts=[], num_gpus=1, distributed=False)
2025-02-23 15:13:12,418:[P:3086]:Rank[0/1] AMP:
  ENABLED: True
  MEMORY_FORMAT: nchw
AUG:
  COLOR_JITTER: [0.4, 0.4, 0.4, 0.1, 0.0]
  DROPBLOCK_BLOCK_SIZE: 7
  DROPBLOCK_KEEP_PROB: 1.0
  DROPBLOCK_LAYERS: [3, 4]
  GAUSSIAN_BLUR: 0.0
  GRAY_SCALE: 0.0
  INTERPOLATION: 2
  MIXCUT: 1.0
  MIXCUT_AND_MIXUP: False
  MIXCUT_MINMAX: []
  MIXUP: 0.8
  MIXUP_MODE: batch
  MIXUP_PROB: 1.0
  MIXUP_SWITCH_PROB: 0.5
  RATIO: (0.75, 1.3333333333333333)
  SCALE: (0.08, 1.0)
  TIMM_AUG:
    AUTO_AUGMENT: rand-m9-mstd0.5-inc1
    COLOR_JITTER: 0.4
    HFLIP: 0.5
    INTERPOLATION: bicubic
    RE_COUNT: 1
    RE_MODE: pixel
    RE_PROB: 0.25
    RE_SPLIT: False
    USE_LOADER: False
    USE_TRANSFORM: False
    VFLIP: 0.0
BASE: ['']
CUDNN:
  BENCHMARK: True
  DETERMINISTIC: False
  ENABLED: True
DATASET:
  DATASET: multidim_imagenet
  DATA_FORMAT: jpg
  LABELMAP: 
  NUM_DIMS: 6
  ROOT: DATASET/agmel/
  SAMPLER: default
  TARGET_SIZE: -1
  TEST_SET: val
  TEST_TSV_LIST: []
  TRAIN_SET: train
  TRAIN_TSV_LIST: []
DATA_DIR: 
DEBUG:
  DEBUG: False
DIST_BACKEND: nccl
FINETUNE:
  BASE_LR: 0.003
  BATCH_SIZE: 512
  EVAL_EVERY: 3000
  FINETUNE: False
  FROZEN_LAYERS: []
  LR_SCHEDULER:
    DECAY_TYPE: step
  TRAIN_MODE: True
  USE_TRAIN_AUG: False
GPUS: (0,)
INPUT:
  MEAN: [0.485, 0.456, 0.406]
  STD: [0.229, 0.224, 0.225]
LOSS:
  LABEL_SMOOTHING: 0.1
  LOSS: softmax
MODEL:
  INIT_WEIGHTS: True
  NAME: cls_cvt
  NUM_CLASSES: 1000
  PRETRAINED: 
  PRETRAINED_LAYERS: ['*']
  SPEC:
    ATTN_DROP_RATE: [0.0, 0.0, 0.0]
    CLS_TOKEN: [False, False, True]
    DEPTH: [1, 2, 10]
    DIM_EMBED: [64, 192, 384]
    DROP_PATH_RATE: [0.0, 0.0, 0.1]
    DROP_RATE: [0.0, 0.0, 0.0]
    INIT: trunc_norm
    KERNEL_QKV: [3, 3, 3]
    MLP_RATIO: [4.0, 4.0, 4.0]
    NUM_HEADS: [1, 3, 6]
    NUM_STAGES: 3
    PADDING_KV: [1, 1, 1]
    PADDING_Q: [1, 1, 1]
    PATCH_PADDING: [2, 1, 1]
    PATCH_SIZE: [7, 3, 3]
    PATCH_STRIDE: [4, 2, 2]
    POS_EMBED: [False, False, False]
    QKV_BIAS: [True, True, True]
    QKV_PROJ_METHOD: ['dw_bn', 'dw_bn', 'dw_bn']
    STRIDE_KV: [2, 2, 2]
    STRIDE_Q: [1, 1, 1]
MODEL_SUMMARY: False
MULTIPROCESSING_DISTRIBUTED: True
NAME: cvt-dim6-310x321
OUTPUT_DIR: OUTPUT/
PIN_MEMORY: True
PRINT_FREQ: 500
RANK: 0
TEST:
  BATCH_SIZE_PER_GPU: 8
  CENTER_CROP: True
  IMAGE_SIZE: [310, 321]
  INTERPOLATION: 3
  MODEL_FILE: 
  REAL_LABELS: False
  VALID_LABELS: 
TRAIN:
  AUTO_RESUME: True
  BATCH_SIZE_PER_GPU: 8
  BEGIN_EPOCH: 0
  CHECKPOINT: 
  CLIP_GRAD_NORM: 0.0
  DETECT_ANOMALY: False
  END_EPOCH: 10
  EVAL_BEGIN_EPOCH: 0
  GAMMA1: 0.99
  GAMMA2: 0.0
  IMAGE_SIZE: [310, 321]
  LR: 0.00025
  LR_SCHEDULER:
    ARGS:
      cooldown_epochs: 10
      decay_rate: 0.1
      epochs: 10
      min_lr: 1e-05
      sched: cosine
      warmup_epochs: 5
      warmup_lr: 1e-06
    METHOD: timm
  MOMENTUM: 0.9
  NESTEROV: True
  OPTIMIZER: adamW
  OPTIMIZER_ARGS:
    
  SAVE_ALL_MODELS: False
  SCALE_LR: True
  SHUFFLE: True
  WD: 0.05
  WITHOUT_WD_LIST: ['bn', 'bias', 'ln']
VERBOSE: True
WORKERS: 4
2025-02-23 15:13:12,419:[P:3086]:Rank[0/1] => using 1 GPUs
2025-02-23 15:13:12,419:[P:3086]:Rank[0/1] => saving config into: OUTPUT/multidim_imagenet/cvt-dim6-310x321/config.yaml
2025-02-23 15:13:12,499:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:12,524:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:12,524:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:12,524:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:12,524:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:12,525:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:12,525:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:12,525:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:12,525:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:12,526:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:12,526:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:12,526:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:12,650:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:12,651:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:12,652:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:12,653:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:12,653:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:12,653:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:12,653:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:12,654:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:12,654:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:12,656:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:12,656:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:12,657:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:12,658:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:12,659:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:12,659:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:12,669:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:12,669:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:12,673:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:12,673:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:12,674:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:12,674:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:12,676:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:12,676:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:12,692:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:13,069:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:13,073:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:13,073:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:13,075:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:13,075:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:13,077:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:13,077:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:13,082:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:13,082:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:13,098:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:13,099:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:13,111:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:13,112:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:13,113:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:13,114:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:13,124:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:13,125:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:13,131:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:13,133:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:13,146:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:13,146:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:13,152:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:13,152:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:13,169:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:13,169:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:13,171:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:13,171:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:13,172:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:13,172:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:13,185:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:13,185:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:13,187:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:13,187:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:13,196:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:13,197:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:13,204:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:13,204:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:13,209:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:13,209:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:13,212:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:13,213:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:13,233:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:13,233:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:13,237:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:13,238:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:13,249:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:13,250:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:13,265:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:13,265:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:13,267:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:13,267:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:13,276:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:13,276:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:13,284:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:13,285:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:13,286:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:13,286:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:13,300:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:13,300:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:13,306:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:13,306:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:13,317:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:13,317:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:13,318:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:13,318:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:13,320:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:13,320:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:13,332:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:13,333:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:13,347:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:13,347:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:13,353:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:13,353:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:13,355:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:13,355:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:13,368:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:13,368:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:13,386:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:13,387:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:13,388:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:13,389:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:13,402:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:13,402:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:13,408:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:13,408:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:13,410:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:13,410:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:13,412:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:13,412:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:13,425:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:13,425:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:13,427:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:13,427:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:13,433:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:13,433:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:13,448:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:13,448:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:13,450:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:13,451:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:13,453:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:13,453:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:13,455:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:13,455:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:13,466:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:13,466:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:13,480:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:13,480:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:13,487:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:13,487:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:13,489:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:13,489:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:13,491:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:13,492:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:13,504:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:13,504:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:13,506:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:13,507:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:13,521:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:13,521:[P:3086]:Rank[0/1] => init weight of Linear from trunc norm
2025-02-23 15:13:13,528:[P:3086]:Rank[0/1] => init bias of Linear to zeros
2025-02-23 15:13:51,138:[P:3086]:Rank[0/1] => ConvolutionalVisionTransformer(
  (stage0): VisionTransformer(
    (patch_embed): ConvEmbed(
      (proj): Conv2d(3, 64, kernel_size=(7, 7), stride=(4, 4), padding=(2, 2))
      (norm): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
    )
    (pos_drop): Dropout(p=0.0, inplace=False)
    (blocks): ModuleList(
      (0): Block(
        (norm1): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
        (attn): Attention(
          (conv_proj_q): Sequential(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
            (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (rearrage): Rearrange('b c h w -> b (h w) c')
          )
          (conv_proj_k): Sequential(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64, bias=False)
            (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (rearrage): Rearrange('b c h w -> b (h w) c')
          )
          (conv_proj_v): Sequential(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64, bias=False)
            (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (rearrage): Rearrange('b c h w -> b (h w) c')
          )
          (proj_q): Linear(in_features=64, out_features=64, bias=True)
          (proj_k): Linear(in_features=64, out_features=64, bias=True)
          (proj_v): Linear(in_features=64, out_features=64, bias=True)
          (attn_drop): Dropout(p=0.0, inplace=False)
          (proj): Linear(in_features=64, out_features=64, bias=True)
          (proj_drop): Dropout(p=0.0, inplace=False)
        )
        (drop_path): Identity()
        (norm2): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
        (mlp): Mlp(
          (fc1): Linear(in_features=64, out_features=256, bias=True)
          (act): QuickGELU()
          (fc2): Linear(in_features=256, out_features=64, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
      )
    )
  )
  (stage1): VisionTransformer(
    (patch_embed): ConvEmbed(
      (proj): Conv2d(64, 192, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (norm): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
    )
    (pos_drop): Dropout(p=0.0, inplace=False)
    (blocks): ModuleList(
      (0): Block(
        (norm1): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
        (attn): Attention(
          (conv_proj_q): Sequential(
            (conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
            (bn): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (rearrage): Rearrange('b c h w -> b (h w) c')
          )
          (conv_proj_k): Sequential(
            (conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=192, bias=False)
            (bn): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (rearrage): Rearrange('b c h w -> b (h w) c')
          )
          (conv_proj_v): Sequential(
            (conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=192, bias=False)
            (bn): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (rearrage): Rearrange('b c h w -> b (h w) c')
          )
          (proj_q): Linear(in_features=192, out_features=192, bias=True)
          (proj_k): Linear(in_features=192, out_features=192, bias=True)
          (proj_v): Linear(in_features=192, out_features=192, bias=True)
          (attn_drop): Dropout(p=0.0, inplace=False)
          (proj): Linear(in_features=192, out_features=192, bias=True)
          (proj_drop): Dropout(p=0.0, inplace=False)
        )
        (drop_path): Identity()
        (norm2): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
        (mlp): Mlp(
          (fc1): Linear(in_features=192, out_features=768, bias=True)
          (act): QuickGELU()
          (fc2): Linear(in_features=768, out_features=192, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
      )
      (1): Block(
        (norm1): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
        (attn): Attention(
          (conv_proj_q): Sequential(
            (conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
            (bn): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (rearrage): Rearrange('b c h w -> b (h w) c')
          )
          (conv_proj_k): Sequential(
            (conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=192, bias=False)
            (bn): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (rearrage): Rearrange('b c h w -> b (h w) c')
          )
          (conv_proj_v): Sequential(
            (conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=192, bias=False)
            (bn): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (rearrage): Rearrange('b c h w -> b (h w) c')
          )
          (proj_q): Linear(in_features=192, out_features=192, bias=True)
          (proj_k): Linear(in_features=192, out_features=192, bias=True)
          (proj_v): Linear(in_features=192, out_features=192, bias=True)
          (attn_drop): Dropout(p=0.0, inplace=False)
          (proj): Linear(in_features=192, out_features=192, bias=True)
          (proj_drop): Dropout(p=0.0, inplace=False)
        )
        (drop_path): Identity()
        (norm2): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
        (mlp): Mlp(
          (fc1): Linear(in_features=192, out_features=768, bias=True)
          (act): QuickGELU()
          (fc2): Linear(in_features=768, out_features=192, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
      )
    )
  )
  (stage2): VisionTransformer(
    (patch_embed): ConvEmbed(
      (proj): Conv2d(192, 384, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (norm): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
    )
    (pos_drop): Dropout(p=0.0, inplace=False)
    (blocks): ModuleList(
      (0): Block(
        (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
        (attn): Attention(
          (conv_proj_q): Sequential(
            (conv): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (rearrage): Rearrange('b c h w -> b (h w) c')
          )
          (conv_proj_k): Sequential(
            (conv): Conv2d(384, 384, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=384, bias=False)
            (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (rearrage): Rearrange('b c h w -> b (h w) c')
          )
          (conv_proj_v): Sequential(
            (conv): Conv2d(384, 384, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=384, bias=False)
            (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (rearrage): Rearrange('b c h w -> b (h w) c')
          )
          (proj_q): Linear(in_features=384, out_features=384, bias=True)
          (proj_k): Linear(in_features=384, out_features=384, bias=True)
          (proj_v): Linear(in_features=384, out_features=384, bias=True)
          (attn_drop): Dropout(p=0.0, inplace=False)
          (proj): Linear(in_features=384, out_features=384, bias=True)
          (proj_drop): Dropout(p=0.0, inplace=False)
        )
        (drop_path): Identity()
        (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
        (mlp): Mlp(
          (fc1): Linear(in_features=384, out_features=1536, bias=True)
          (act): QuickGELU()
          (fc2): Linear(in_features=1536, out_features=384, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
      )
      (1): Block(
        (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
        (attn): Attention(
          (conv_proj_q): Sequential(
            (conv): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (rearrage): Rearrange('b c h w -> b (h w) c')
          )
          (conv_proj_k): Sequential(
            (conv): Conv2d(384, 384, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=384, bias=False)
            (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (rearrage): Rearrange('b c h w -> b (h w) c')
          )
          (conv_proj_v): Sequential(
            (conv): Conv2d(384, 384, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=384, bias=False)
            (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (rearrage): Rearrange('b c h w -> b (h w) c')
          )
          (proj_q): Linear(in_features=384, out_features=384, bias=True)
          (proj_k): Linear(in_features=384, out_features=384, bias=True)
          (proj_v): Linear(in_features=384, out_features=384, bias=True)
          (attn_drop): Dropout(p=0.0, inplace=False)
          (proj): Linear(in_features=384, out_features=384, bias=True)
          (proj_drop): Dropout(p=0.0, inplace=False)
        )
        (drop_path): DropPath()
        (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
        (mlp): Mlp(
          (fc1): Linear(in_features=384, out_features=1536, bias=True)
          (act): QuickGELU()
          (fc2): Linear(in_features=1536, out_features=384, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
      )
      (2): Block(
        (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
        (attn): Attention(
          (conv_proj_q): Sequential(
            (conv): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (rearrage): Rearrange('b c h w -> b (h w) c')
          )
          (conv_proj_k): Sequential(
            (conv): Conv2d(384, 384, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=384, bias=False)
            (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (rearrage): Rearrange('b c h w -> b (h w) c')
          )
          (conv_proj_v): Sequential(
            (conv): Conv2d(384, 384, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=384, bias=False)
            (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (rearrage): Rearrange('b c h w -> b (h w) c')
          )
          (proj_q): Linear(in_features=384, out_features=384, bias=True)
          (proj_k): Linear(in_features=384, out_features=384, bias=True)
          (proj_v): Linear(in_features=384, out_features=384, bias=True)
          (attn_drop): Dropout(p=0.0, inplace=False)
          (proj): Linear(in_features=384, out_features=384, bias=True)
          (proj_drop): Dropout(p=0.0, inplace=False)
        )
        (drop_path): DropPath()
        (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
        (mlp): Mlp(
          (fc1): Linear(in_features=384, out_features=1536, bias=True)
          (act): QuickGELU()
          (fc2): Linear(in_features=1536, out_features=384, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
      )
      (3): Block(
        (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
        (attn): Attention(
          (conv_proj_q): Sequential(
            (conv): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (rearrage): Rearrange('b c h w -> b (h w) c')
          )
          (conv_proj_k): Sequential(
            (conv): Conv2d(384, 384, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=384, bias=False)
            (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (rearrage): Rearrange('b c h w -> b (h w) c')
          )
          (conv_proj_v): Sequential(
            (conv): Conv2d(384, 384, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=384, bias=False)
            (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (rearrage): Rearrange('b c h w -> b (h w) c')
          )
          (proj_q): Linear(in_features=384, out_features=384, bias=True)
          (proj_k): Linear(in_features=384, out_features=384, bias=True)
          (proj_v): Linear(in_features=384, out_features=384, bias=True)
          (attn_drop): Dropout(p=0.0, inplace=False)
          (proj): Linear(in_features=384, out_features=384, bias=True)
          (proj_drop): Dropout(p=0.0, inplace=False)
        )
        (drop_path): DropPath()
        (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
        (mlp): Mlp(
          (fc1): Linear(in_features=384, out_features=1536, bias=True)
          (act): QuickGELU()
          (fc2): Linear(in_features=1536, out_features=384, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
      )
      (4): Block(
        (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
        (attn): Attention(
          (conv_proj_q): Sequential(
            (conv): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (rearrage): Rearrange('b c h w -> b (h w) c')
          )
          (conv_proj_k): Sequential(
            (conv): Conv2d(384, 384, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=384, bias=False)
            (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (rearrage): Rearrange('b c h w -> b (h w) c')
          )
          (conv_proj_v): Sequential(
            (conv): Conv2d(384, 384, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=384, bias=False)
            (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (rearrage): Rearrange('b c h w -> b (h w) c')
          )
          (proj_q): Linear(in_features=384, out_features=384, bias=True)
          (proj_k): Linear(in_features=384, out_features=384, bias=True)
          (proj_v): Linear(in_features=384, out_features=384, bias=True)
          (attn_drop): Dropout(p=0.0, inplace=False)
          (proj): Linear(in_features=384, out_features=384, bias=True)
          (proj_drop): Dropout(p=0.0, inplace=False)
        )
        (drop_path): DropPath()
        (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
        (mlp): Mlp(
          (fc1): Linear(in_features=384, out_features=1536, bias=True)
          (act): QuickGELU()
          (fc2): Linear(in_features=1536, out_features=384, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
      )
      (5): Block(
        (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
        (attn): Attention(
          (conv_proj_q): Sequential(
            (conv): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (rearrage): Rearrange('b c h w -> b (h w) c')
          )
          (conv_proj_k): Sequential(
            (conv): Conv2d(384, 384, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=384, bias=False)
            (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (rearrage): Rearrange('b c h w -> b (h w) c')
          )
          (conv_proj_v): Sequential(
            (conv): Conv2d(384, 384, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=384, bias=False)
            (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (rearrage): Rearrange('b c h w -> b (h w) c')
          )
          (proj_q): Linear(in_features=384, out_features=384, bias=True)
          (proj_k): Linear(in_features=384, out_features=384, bias=True)
          (proj_v): Linear(in_features=384, out_features=384, bias=True)
          (attn_drop): Dropout(p=0.0, inplace=False)
          (proj): Linear(in_features=384, out_features=384, bias=True)
          (proj_drop): Dropout(p=0.0, inplace=False)
        )
        (drop_path): DropPath()
        (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
        (mlp): Mlp(
          (fc1): Linear(in_features=384, out_features=1536, bias=True)
          (act): QuickGELU()
          (fc2): Linear(in_features=1536, out_features=384, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
      )
      (6): Block(
        (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
        (attn): Attention(
          (conv_proj_q): Sequential(
            (conv): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (rearrage): Rearrange('b c h w -> b (h w) c')
          )
          (conv_proj_k): Sequential(
            (conv): Conv2d(384, 384, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=384, bias=False)
            (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (rearrage): Rearrange('b c h w -> b (h w) c')
          )
          (conv_proj_v): Sequential(
            (conv): Conv2d(384, 384, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=384, bias=False)
            (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (rearrage): Rearrange('b c h w -> b (h w) c')
          )
          (proj_q): Linear(in_features=384, out_features=384, bias=True)
          (proj_k): Linear(in_features=384, out_features=384, bias=True)
          (proj_v): Linear(in_features=384, out_features=384, bias=True)
          (attn_drop): Dropout(p=0.0, inplace=False)
          (proj): Linear(in_features=384, out_features=384, bias=True)
          (proj_drop): Dropout(p=0.0, inplace=False)
        )
        (drop_path): DropPath()
        (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
        (mlp): Mlp(
          (fc1): Linear(in_features=384, out_features=1536, bias=True)
          (act): QuickGELU()
          (fc2): Linear(in_features=1536, out_features=384, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
      )
      (7): Block(
        (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
        (attn): Attention(
          (conv_proj_q): Sequential(
            (conv): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (rearrage): Rearrange('b c h w -> b (h w) c')
          )
          (conv_proj_k): Sequential(
            (conv): Conv2d(384, 384, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=384, bias=False)
            (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (rearrage): Rearrange('b c h w -> b (h w) c')
          )
          (conv_proj_v): Sequential(
            (conv): Conv2d(384, 384, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=384, bias=False)
            (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (rearrage): Rearrange('b c h w -> b (h w) c')
          )
          (proj_q): Linear(in_features=384, out_features=384, bias=True)
          (proj_k): Linear(in_features=384, out_features=384, bias=True)
          (proj_v): Linear(in_features=384, out_features=384, bias=True)
          (attn_drop): Dropout(p=0.0, inplace=False)
          (proj): Linear(in_features=384, out_features=384, bias=True)
          (proj_drop): Dropout(p=0.0, inplace=False)
        )
        (drop_path): DropPath()
        (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
        (mlp): Mlp(
          (fc1): Linear(in_features=384, out_features=1536, bias=True)
          (act): QuickGELU()
          (fc2): Linear(in_features=1536, out_features=384, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
      )
      (8): Block(
        (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
        (attn): Attention(
          (conv_proj_q): Sequential(
            (conv): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (rearrage): Rearrange('b c h w -> b (h w) c')
          )
          (conv_proj_k): Sequential(
            (conv): Conv2d(384, 384, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=384, bias=False)
            (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (rearrage): Rearrange('b c h w -> b (h w) c')
          )
          (conv_proj_v): Sequential(
            (conv): Conv2d(384, 384, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=384, bias=False)
            (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (rearrage): Rearrange('b c h w -> b (h w) c')
          )
          (proj_q): Linear(in_features=384, out_features=384, bias=True)
          (proj_k): Linear(in_features=384, out_features=384, bias=True)
          (proj_v): Linear(in_features=384, out_features=384, bias=True)
          (attn_drop): Dropout(p=0.0, inplace=False)
          (proj): Linear(in_features=384, out_features=384, bias=True)
          (proj_drop): Dropout(p=0.0, inplace=False)
        )
        (drop_path): DropPath()
        (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
        (mlp): Mlp(
          (fc1): Linear(in_features=384, out_features=1536, bias=True)
          (act): QuickGELU()
          (fc2): Linear(in_features=1536, out_features=384, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
      )
      (9): Block(
        (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
        (attn): Attention(
          (conv_proj_q): Sequential(
            (conv): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (rearrage): Rearrange('b c h w -> b (h w) c')
          )
          (conv_proj_k): Sequential(
            (conv): Conv2d(384, 384, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=384, bias=False)
            (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (rearrage): Rearrange('b c h w -> b (h w) c')
          )
          (conv_proj_v): Sequential(
            (conv): Conv2d(384, 384, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=384, bias=False)
            (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (rearrage): Rearrange('b c h w -> b (h w) c')
          )
          (proj_q): Linear(in_features=384, out_features=384, bias=True)
          (proj_k): Linear(in_features=384, out_features=384, bias=True)
          (proj_v): Linear(in_features=384, out_features=384, bias=True)
          (attn_drop): Dropout(p=0.0, inplace=False)
          (proj): Linear(in_features=384, out_features=384, bias=True)
          (proj_drop): Dropout(p=0.0, inplace=False)
        )
        (drop_path): DropPath()
        (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
        (mlp): Mlp(
          (fc1): Linear(in_features=384, out_features=1536, bias=True)
          (act): QuickGELU()
          (fc2): Linear(in_features=1536, out_features=384, bias=True)
          (drop): Dropout(p=0.0, inplace=False)
        )
      )
    )
  )
  (norm): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
  (head): Linear(in_features=384, out_features=1000, bias=True)
  (merge_attn): MergeAttention(
    (mha): MultiheadAttention(
      (out_proj): _LinearWithBias(in_features=384, out_features=384, bias=True)
    )
    (norm): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
  )
)
2025-02-23 15:13:51,142:[P:3086]:Rank[0/1] Trainable Model Total Parameter: 	20.6M
2025-02-23 15:13:51,211:[P:3086]:Rank[0/1] => MultiDimImageDataset from 'DATASET/agmel/train' loaded. total samples: 368
2025-02-23 15:13:51,211:[P:3086]:Rank[0/1] => [build_dataset] dataset=multidim_imagenet, is_train=True, #samples=368
2025-02-23 15:13:52,366:[P:3086]:Rank[0/1] [DEBUG] Batch shape: torch.Size([8, 6, 3, 310, 310])
2025-02-23 15:13:52,935:[P:3086]:Rank[0/1] => MultiDimImageDataset from 'DATASET/agmel/val' loaded. total samples: 94
2025-02-23 15:13:52,935:[P:3086]:Rank[0/1] => [build_dataset] dataset=multidim_imagenet, is_train=False, #samples=94
2025-02-23 15:13:54,177:[P:3086]:Rank[0/1] [DEBUG] Batch shape: torch.Size([8, 6, 3, 310, 310])
2025-02-23 15:13:55,113:[P:3086]:Rank[0/1] => start training
2025-02-23 15:13:55,113:[P:3086]:Rank[0/1] => Epoch[0]: epoch start
2025-02-23 15:13:55,114:[P:3086]:Rank[0/1] => Epoch[0]: train start
2025-02-23 15:13:55,114:[P:3086]:Rank[0/1] => switch to train mode
